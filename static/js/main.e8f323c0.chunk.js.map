{"version":3,"sources":["Components/Togglenavbar.js","Components/SocialLogoWeb.js","Components/DateRange.js","Components/PatientFilter.js","Components/UserIcons.js","Components/BodyContent.js","App.js","serviceWorker.js","index.js"],"names":["toggleNavBar","id","className","onClick","x","document","getElementById","offsetWidth","style","width","openNav","SocialLogoWeb","openWebiste","window","open","href","src","alt","DateRange","props","state","StartDate","EndDate","startDate","this","startDateId","endDate","endDateId","onDatesChange","setState","focusedInput","onFocusChange","isOutsideRange","Component","PatientFilter","today","Date","todaydate","getDate","getMonth","getFullYear","currentDate","yesterdayDate","setDate","yesterdayString","currenttoday","tomorrow","tomorrowtext","rotateDiv","$","toggleClass","UserIcons","BodyContent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8f323c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CSS/Togglenavbar.css';\r\nimport {FaUsers} from 'react-icons/fa';\r\n\r\nfunction toggleNavBar() {\r\n\r\n    function openNav() {\r\n        var x = document.getElementById(\"mySidebar\").offsetWidth;\r\n\r\n        if (x === 50) {\r\n            document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n        } else {\r\n            document.getElementById(\"mySidebar\").style.width = \"50px\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"mySidebar\" className=\"sidebar\">\r\n            <p className=\"openbtn\" onClick={() => openNav()}><FaUsers /></p>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default toggleNavBar\r\n","import React from 'react';\r\nimport './CSS/SocialLogoWeb.css';\r\nimport {FiPhoneCall} from \"react-icons/fi\";\r\nimport {FaWhatsappSquare} from 'react-icons/fa';\r\nimport {MdMail} from \"react-icons/md\";\r\n\r\nfunction SocialLogoWeb() {\r\n    function openWebiste() {\r\n        window.open('http://www.raagaamed.com/', '_blank');\r\n    }\r\n    return (<> <div className=\"icon-col\">\r\n        <a href=\"#contact\"><FiPhoneCall/></a>\r\n        <a href=\"#home\"><FaWhatsappSquare/></a>\r\n        <a href=\"#news\"><MdMail/></a>\r\n    </div> < div className = \"logo\" > <img onClick= {() => openWebiste()} src=\"/images/logo.png\" alt=\"logo\"/> < p onClick = {\r\n        () => openWebiste()\r\n    } > www.raagaamed.com < /p>\r\n     </div > </>)\r\n}\r\n\r\nexport default SocialLogoWeb\r\n","import React, {Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './CSS/react_dates_overrides.css'\r\nimport 'react-dates/initialize'\r\nimport {DateRangePicker} from 'react-dates'\r\nimport 'react-dates/lib/css/_datepicker.css'\r\n\r\n\r\nclass DateRange extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            StartDate: null,\r\n            EndDate: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <DateRangePicker startDate={this.state.startDate}// momentPropTypes.momentObj or null,\r\n                    startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\r\n                    endDate={this.state.endDate} // momentPropTypes.momentObj or null,\r\n                    endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\r\n                    onDatesChange={({startDate, endDate}) => this.setState({startDate, endDate})} // PropTypes.func.isRequired,\r\n                    focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\r\n                    onFocusChange={focusedInput => this.setState({focusedInput})}\r\n                    isOutsideRange={()=> false} // PropTypes.func.isRequired,\r\n                />\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DateRange\r\n","import React from 'react';\r\nimport './CSS/PatientFilter.css';\r\nimport DateRange from './DateRange';\r\nimport $ from 'jquery';\r\n// import {GoArrowLeft, GoArrowRight} from \"react-icons/go\";\r\n\r\nfunction PatientFilter() {\r\n\r\n    // -----Today Date------\r\n    var today = new Date();\r\n    var todaydate = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\r\n\r\n    // -------Yesterday Date ------\r\n    var currentDate = new Date();\r\n    var yesterdayDate = new Date(currentDate);\r\n    yesterdayDate.setDate(yesterdayDate.getDate() - 1);\r\n    var yesterdayString = yesterdayDate.getDate() + '-' + (yesterdayDate.getMonth() + 1) + '-' + yesterdayDate.getFullYear();\r\n\r\n    // ------Tomorrow Date------\r\n    var currenttoday = new Date();\r\n    var tomorrow = new Date(currenttoday);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    var tomorrowtext = tomorrow.getDate() + '-' + (tomorrow.getMonth() + 1) + '-' + tomorrow.getFullYear();\r\n\r\n    // --------Rotate Div-------\r\n\r\n    function rotateDiv(){\r\n\r\n        $('#Inpatientrotating').toggleClass('rotated');\r\n        $('#Doctorrotating').toggleClass('rotated');\r\n        $('#patientrotating').toggleClass('rotated');\r\n    }\r\n\r\n    return ( <> <div className=\"patientfilter\">\r\n        <div className=\"float-left\">\r\n            <div className=\"weekcenter\">\r\n                <span onClick={() => rotateDiv()}>This Week</span>\r\n            </div>\r\n            <div id=\"Inpatientrotating\" className=\"InPatientcenter\">\r\n                <p>InPatient List</p>\r\n                <span>32</span>\r\n            </div>\r\n            <div className=\"prev\">\r\n                {/* <GoArrowLeft size=\"20px\" color=\"white\"/> */}\r\n                <span onClick={() => rotateDiv()}>Prev : {yesterdayString}</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"float-left\">\r\n            <div className=\"monthcenter\">\r\n                <span onClick={() => rotateDiv()}>This Month</span>\r\n            </div>\r\n            <div id=\"Doctorrotating\" className=\"Doctorcenter\">\r\n                <p>Doctor List</p>\r\n                <span>20</span>\r\n            </div>\r\n            <div className=\"today\">\r\n                <span onClick={() => rotateDiv()}>Today : {todaydate}</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"float-left\">\r\n            <div className=\"fromtocenter\">\r\n                <span><DateRange/></span>\r\n            </div>\r\n            <div id=\"patientrotating\" className=\"Patientcenter\">\r\n                <p>Patient List</p>\r\n                <span>12</span>\r\n            </div>\r\n            <div className=\"next\">\r\n                <span onClick={() => rotateDiv()}>Next : {tomorrowtext}</span>\r\n                {/* <GoArrowRight size=\"20px\" color=\"white\"/> */}\r\n            </div>\r\n        </div>\r\n    </div> </>\r\n    )\r\n}\r\n\r\nexport default PatientFilter","import React from 'react'\r\nimport './CSS/UserIcon.css'\r\n\r\nimport {FaDesktop, FaDatabase, FaAddressCard, FaUsers} from 'react-icons/fa';\r\nimport {MdPersonAdd, MdDelete} from \"react-icons/md\";\r\nimport {AiOutlineUnorderedList, AiFillCreditCard, AiFillLike} from \"react-icons/ai\";\r\n\r\n\r\nfunction UserIcons() {\r\n    return (\r\n        <>\r\n            <div className=\"float-left usericons\">\r\n                <p><FaDesktop/></p>\r\n                <p><MdPersonAdd/></p>\r\n                <p><AiOutlineUnorderedList/></p>\r\n            </div>\r\n            <div className=\"float-left usericons\">\r\n                <p><AiFillCreditCard/></p>\r\n                <p><FaDatabase/></p>\r\n                <p><AiFillLike/></p>\r\n            </div>\r\n            <div className=\"float-left usericons\">\r\n                <p><FaAddressCard/></p>\r\n                <p><FaUsers/></p>\r\n                <p><MdDelete/></p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserIcons\r\n","import React from 'react';\r\nimport './CSS/BodyContent.css';\r\n\r\nfunction BodyContent() {\r\n    return (\r\n        <>\r\n            <div className=\"gallery-wrap\">\r\n                <div className=\"item item-1\">\r\n                    <h2>Doctor's list</h2>\r\n                </div>\r\n                <div className=\"item item-2\">\r\n                    <h2>\r\n                        Patient Appoitment\r\n                    </h2>\r\n                </div>\r\n                <div className=\"item item-3\">\r\n                    <h2>Medical Report</h2>\r\n                </div>\r\n                <div className=\"item item-4\">\r\n                    <h2>Appoinment History</h2>\r\n                </div>\r\n                <div className=\"item item-5\">\r\n                    <h2>Straffs List</h2>\r\n                </div>\r\n                <div className=\"item item-6\">\r\n                    <h2>List</h2>\r\n                </div>\r\n                <div className=\"item item-7\">\r\n                    <h2>Empty</h2>\r\n                </div>\r\n                <div className=\"item item-8\">\r\n                    <h2>Empty List</h2>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BodyContent\r\n","import React from 'react';\nimport './Components/CSS/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Togglenavbar from './Components/Togglenavbar';\nimport SocialLogoWeb from './Components/SocialLogoWeb';\nimport PatientFilter from './Components/PatientFilter';\nimport UserIcons from './Components/UserIcons';\nimport BodyContent from './Components/BodyContent';\n\nfunction App() {\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row header-bg\">\n                <div className=\"nopadding\">\n                    <UserIcons/>\n                </div>\n                <div className=\"nopadding\">\n                    <PatientFilter/>\n                </div>\n                <div className=\"nopadding\">\n                    <div className=\"titlename\">\n                        <h5>Sri Narayana Eductional And Medical Research Center</h5>\n                        <p>334,Chenglepet Main Road,Chenglepet</p>\n                    </div>\n                </div>\n                <div className=\"nopadding\">\n                    <SocialLogoWeb/>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"content-width float-left\">\n                    <BodyContent/>\n                </div>\n                <div className=\"togglenav float-right\">\n                    <Togglenavbar/>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}